name: BitBucket Server Migration Tool Windows
on:
  workflow_dispatch:
  
jobs: 
  Create-Report:
    runs-on: [ 'self-hosted' , 'Linux' , 'X64' ]
    steps:
      - name: Checkout to repository
        run: echo "projectKey,repoName,branchDefault,migrated,openPR,status" > ../repos-${{ github.run_number }}.csv
          
  Get-Repositories-to-Migrate:
      runs-on: ubuntu-latest
      needs: Create-Report
      outputs:
        REPOSITORIES: ${{ steps.set-matrix.outputs.REPO }}
        ORGORIGEN: ${{ steps.set-orgorigen.outputs.OW}}
        ORGTARGET: ${{ steps.set-orgtarget.outputs.ORGTAR }}
        
      steps:
        - name: Checkout to repository
          uses: actions/checkout@v4
       
        - name: Set matrix data
          id: set-matrix
          run: |
            echo "REPO=$(jq -c -r '.repositories | map(.repo_name)' < ./repositories.json)" >> $GITHUB_OUTPUT 
            echo "$REPO"
            
        - name: Set org origen
          id: set-orgorigen
          run: |
            echo "OW=$(jq -r '.orgorigen' repositories.json)" >> $GITHUB_OUTPUT 
            echo "$OW"

        - name: Set org target
          id: set-orgtarget
          run: |
            echo "ORGTAR=$(jq -r '.orgtarget' repositories.json)" >> $GITHUB_OUTPUT 
            echo "$ORGTAR"
        
  Migration:
    runs-on: [ 'self-hosted' , 'Linux' , 'X64' ]
    needs: Get-Repositories-to-Migrate
    strategy:
      max-parallel: 1
      # SET MATRIX WITH PROJECTS TO MIGRATE
      matrix:
        repository: ${{fromJson(needs.Get-Repositories-to-Migrate.outputs.REPOSITORIES)}}
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      BBS_USERNAME: ${{ secrets.BBS_USERNAME }}
      BBS_PASSWORD: ${{ secrets.BBS_PASSWORD }}
      BBS_URL: ${{ secrets.BBS_URL }}
      BBS_TOKEN: ${{ secrets.BBS_TOKEN }}
      ORGORIGEN: ${{ needs.Get-Repositories-to-Migrate.outputs.ORGORIGEN }}
      ORGTARGET: ${{ needs.Get-Repositories-to-Migrate.outputs.ORGTARGET }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v4
              
      - name: Migration

        run: |
          # Guardar el índice de la línea agregada
          index=$(wc -l < ../repos-${{ github.run_number }}.csv)
          echo "${{ env.ORGORIGEN }},${{ matrix.repository }},," >> ../repos-${{ github.run_number }}.csv
          
      - name: Check if repository exists
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ env.ORGTARGET }}/${{ matrix.repository }}")

            # Verificar el código de respuesta
            if [ "$response" -eq 200 ]; then
              echo "El repositorio ${{ env.ORGTARGET }}/${{ matrix.repository }} existe."
              index=$(wc -l < ../repos-${{ github.run_number }}.csv)
              sed -i "${index} s/^\(\([^,]*,\)\{3\}\)[^,]*/\1Fail-repo-exist\//" ../repos-${{ github.run_number }}.csv
              #exit 1  # Salir con un código de error
            else
              echo "El repositorio ${{ env.ORGTARGET }}/${{ matrix.repository }} no existe."
            fi


          
      - name: Clone BitBucket Repository ${{ matrix.repository }}
        run: |
          git clone http://${{ secrets.BBS_USERNAME }}:${{ secrets.BBS_PASSWORD }}@${{ secrets.BBS_URL }}/scm/${{ env.ORGORIGEN }}/${{ matrix.repository }}.git --mirror

      - name: Create repository on Github
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/${{ env.ORGTARGET }}/repos \
            -d '{"name":"${{ matrix.repository }}","private":true}'

      - name: Set up LFS
        if: false
        run: git lfs migrate import --above="100 MB" --everything

      - name: Push repository to Github
        run: |
          cd ${{ matrix.repository }}.git
          git remote add github "https://${{ secrets.GH_PAT }}@github.com/${{ env.ORGTARGET }}/${{ matrix.repository }}.git"
          git lfs migrate import --above="100 MB" --everything
          git push github --mirror
          if [ $? -eq 0 ]; then
              echo "Push successful"
              index=$(wc -l < ../../repos-${{ github.run_number }}.csv)
              sed -i "${index} s/^\(\([^,]*,\)\{3\}\)[^,]*/\1Migrado/" ../../repos-${{ github.run_number }}.csv

              exit 0
          else
              index=$(wc -l < ../../repos-${{ github.run_number }}.csv)
              sed -i "${index} s/^\(\([^,]*,\)\{3\}\)[^,]*/\1Push-Failed\/" ../../repos-${{ github.run_number }}.csv
              echo "Push failed"
              exit 1
          fi

      - name: Set default branch
        run: |
          # Definir la URL de la solicitud GET
          url="http://${{ secrets.BBS_URL }}/rest/api/1.0/projects/${{ env.ORGORIGEN }}/repos/${{ matrix.repository }}/branches/default"
          
          # Realizar la solicitud GET con curl y almacenar la respuesta en una variable
          response=$(curl -s -H "Accept: application/json" -H "Authorization: Bearer ${{ secrets.BBS_TOKEN }}" "${url}")
          default_branch=$(echo "${response}" | jq -r '.displayId')
          
          # Print default branch
          echo "Default Branch: ${default_branch}"

          # Set branch on Github Repository
          response=$(curl -s -X PATCH -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -d "{\"default_branch\": \"${default_branch}\"}" "https://api.github.com/repos/${{ env.ORGTARGET }}/${{ matrix.repository }}")

          # Update report
          index=$(wc -l < ../repos-${{ github.run_number }}.csv)
          sed -i "${index} s/^\(\([^,]*,\)\{2\}\)[^,]*/\1${default_branch}/" ../repos-${{ github.run_number }}.csv

      - name: Pull request
        run: |
          curl -X GET \
          http://${{ secrets.BBS_URL }}/rest/api/latest/projects/${{ env.ORGORIGEN }}/repos/${{ matrix.repository }}/pull-requests \
          -H 'Accept: application/json' \
          -H 'Authorization: Bearer ${{ secrets.BBS_TOKEN }}' \
          -o bbs_pullrequest.json
          cat bbs_pullrequest.json

          cat bbs_pullrequest.json | jq -r '.values[] | 
            .title as $title | 
            .description as $body | 
            .fromRef.displayId as $head | 
            .toRef.displayId as $base | 
            "curl -s -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: Bearer ${{ secrets.GH_PAT }}\" -d \"{\\\"title\\\": \\\"\($title)\\\", \\\"body\\\": \\\"\($body)\\\", \\\"head\\\": \\\"\($head)\\\", \\\"base\\\": \\\"\($base)\\\"}\" https://api.github.com/repos/${{ env.ORGTARGET }}/${{ matrix.repository }}/pulls"' | sh

          num_pull_requests=$(cat bbs_pullrequest.json | jq -r '.size')

          echo "pr open $num_pull_requests"
          
          # Update report
          
          index_line=$(wc -l < ../repos-${{ github.run_number }}.csv)
          run_number=${{ github.run_number }}
          open_pr=${num_pull_requests}
          awk -v index_line="$index_line" -v open_pr="$open_pr" -v run_number="$run_number" 'BEGIN{FS=OFS=","} NR==index_line {$5=open_pr; $6="Full"} {print}' ../repos-${run_number}.csv > temp.csv && mv temp.csv ../repos-${run_number}.csv
          #awk -v index_line="$index_line" -v run_number="$run_number" 'BEGIN{FS=OFS=","} NR==index_line {$6="Full"} {print}' ../repos-${run_number}.csv > temp.csv && mv temp.csv ../repos-${run_number}.csv
      
      - name: Clean runner
        if: always()
        run: |
          shopt -s dotglob
          rm -rf ./*
          shopt -u dotglob

  Upload-Report:
    runs-on: [ 'self-hosted' , 'Linux' , 'X64' ]
    needs: Migration
    steps:
      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: LOG Outputs MIGRATION-${{ github.run_number }}
          path: /home/julimax/Desktop/runner2/actions-runner/_work/bbs-old-to-gh/repos-${{ github.run_number }}.csv      
