name: BitBucket Server Migration Tool Windows
on:
  workflow_dispatch:
  
jobs: 
  Get-Repositories-to-Migrate:
      runs-on: ubuntu-latest
      outputs:
        REPOSITORIES: ${{ steps.set-matrix.outputs.REPO }}
        ORGORIGEN: ${{ steps.set-orgorigen.outputs.OW}}
        ORGTARGET: ${{ steps.set-orgtarget.outputs.ORGTAR }}
        
      steps:
        - name: Checkout to repository
          uses: actions/checkout@v3
       
        - name: Set matrix data
          id: set-matrix
          run: |
            echo "REPO=$(jq -c -r '.repositories | map(.repo_name)' < ./repositories.json)" >> $GITHUB_OUTPUT 
            echo "$REPO"
            
        - name: Set org origen
          id: set-orgorigen
          run: |
            echo "OW=$(jq -r '.orgorigen' repositories.json)" >> $GITHUB_OUTPUT 
            echo "$OW"

        - name: Set org target
          id: set-orgtarget
          run: |
            echo "ORGTAR=$(jq -r '.orgtarget' repositories.json)" >> $GITHUB_OUTPUT 
            echo "$ORGTAR"
        
  Migration:
    runs-on: [ 'self-hosted' , 'Linux' , 'X64' ]
    needs: Get-Repositories-to-Migrate
    strategy:
      max-parallel: 1
      # SET MATRIX WITH PROJECTS TO MIGRATE
      matrix:
        repository: ${{fromJson(needs.Get-Repositories-to-Migrate.outputs.REPOSITORIES)}}
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
      BBS_USERNAME: ${{ secrets.BBS_USERNAME }}
      BBS_PASSWORD: ${{ secrets.BBS_PASSWORD }}
      BBS_TOKEN: ${{ secrets.BBS_TOKEN }}
      ORGORIGEN: ${{ needs.Get-Repositories-to-Migrate.outputs.ORGORIGEN }}
      ORGTARGET: ${{ needs.Get-Repositories-to-Migrate.outputs.ORGTARGET }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3
              
      - name: Migration

        run:
          echo "${{ env.ORGORIGEN }} to ${{ env.ORGTARGET }}"

      - name: CREATE RUNNER ARTIFACT FOLDER
        run: |
          mkdir ../MIGRATION-${{ github.run_number }}
          
      - name: Check if repository exists
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ env.ORGTARGET }}/${{ matrix.repository }}")

            # Verificar el código de respuesta
            if [ "$response" -eq 200 ]; then
              echo "El repositorio ${{ env.ORGTARGET }}/${{ matrix.repository }} existe."
              exit 1  # Salir con un código de error
            else
              echo "Error: El repositorio ${{ env.ORGTARGET }}/${{ matrix.repository }} no existe."
              
            fi

      #- name: Pull request
      #  run: |
      #    curl -X GET \
      #    http://localhost:7990/rest/api/latest/projects/${{ env.ORGORIGEN }}/repos/repo-test/pull-requests \
      #    -H 'Accept: application/json' \
      #    -H 'Authorization: Bearer ${{ secrets.BBS_TOKEN }}' \
      #    -o bbs_pullrequest.json
          
      - name: Clone BitBucket Repository ${{ matrix.repository }}
        run: |
          git clone http://${{ secrets.BBS_USERNAME }}:${{ secrets.BBS_PASSWORD }}@localhost:7990/scm/${{ env.ORGORIGEN }}/${{ matrix.repository }}.git --mirror

      - name: Create repository on Github
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/${{ env.ORGTARGET }}/repos \
            -d '{"name":"${{ matrix.repository }}","private":true}'

      - name: Push repository to Github
        run: |
          cd ${{ matrix.repository }}.git
          git remote add github "https://${{ secrets.GH_PAT }}@github.com/${{ env.ORGTARGET }}/${{ matrix.repository }}.git"
          git push github --mirror
          if [ $? -eq 0 ]; then
            echo "Push successful"
            exit 0
          else
            echo "Push failed"
            exit 1
          fi

      - name: Set default branch
        run: |
          # Definir la URL de la solicitud GET
          url="http://localhost:7990/rest/api/1.0/projects/${{ env.ORGORIGEN }}/repos/${{ matrix.repository }}/branches/default"
          
          # Realizar la solicitud GET con curl y almacenar la respuesta en una variable
          response=$(curl -s -H "Accept: application/json" -H "Authorization: Bearer ${{ secrets.BBS_TOKEN }}" "${url}")
          default_branch=$(echo "${response}" | jq -r '.displayId')
          
          # Print default branch
          echo "Default Branch: ${default_branch}"

          # Set branch on Github Repository
          response=$(curl -s -X PATCH -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -d "{\"default_branch\": \"${default_branch}\"}" "https://api.github.com/repos/${{ env.ORGTARGET }}/${{ matrix.repository }}")
      
      - name: Clean runner
        run: |
          shopt -s dotglob
          rm -rf ./*
          shopt -u dotglob

      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: LOG Outputs MIGRATION-${{ github.run_number }}
          path: /home/julimax/Desktop/runner2/actions-runner/_work/bbs-old-to-gh/MIGRATION-${{ github.run_number }}/*       
